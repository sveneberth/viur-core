name: Python test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master
      - develop

#permissions:
#  contents: read

jobs:
  test:
    strategy:
      matrix:
        python: [ "3.8", "3.9", "3.10" ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: viur
#          submodules: "recursive"

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          cd viur
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then python -m pip install -r tests/requirements.txt; fi
          python -m pip install -U coverage

      - name: Check env
        run: |
          cd viur
          git status
          git submodule status
          python -V

      - name: Run the tests
        run: |
          pwd
          python ./viur/tests/main.py
          echo $?
          pwd

      - name: Build Coverage
        run: |
          pwd
          cd viur/tests/
          coverage run --source=../core -m unittest discover
          coverage report
          coverage html

#      - name: Check
#        run: |
#          pwd
#          ls . -lHFA
#          ls viur -lHFA
#          ls /home/runner -lHFA
#          ls /home/runner/work -lHFA
#          ls /home/runner/work/viur-core -lHFA
#          ls /home/runner/work/viur-core/viur-core -lHFA
#          ls /home/runner/work/viur-core/viur-core/viur -lHFA
#          ls /home/runner/work/viur-core/viur-core/viur/tests -lHFA
#          ls /home/runner/work/viur-core/viur-core/viur/tests/htmlcov -lHFA

      - name: Deploy Coverage
        uses: peaceiris/actions-gh-pages@v3
        # TODO: should be later only main, or the target must be a different branch
        if: ${{ matrix.python == '3.10' && github.event_name == 'push' && (startsWith(github.ref_name, 'feature/unittest') || github.ref_name == 'main') }}
        with:
#          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./viur/tests/htmlcov
          publish_branch: coverage-html2
          allow_empty_commit: true
          keep_files: true
          #force_orphan: true

#
#      - name: Deploy ðŸš€
#        uses: JamesIves/github-pages-deploy-action@v4
#        with:
#          branch: coverage-html # The branch the action should deploy to.
#          folder: viur/tests/htmlcov # The folder the action should deploy.

#      - name: Install SSH Key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
##          known_hosts: ''
#
#      - name: Add SSH key
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          mkdir -p /home/runner/.ssh
#          # Replace example.com with the hostname of the machine
#          # you're SSH-ing into
#          ssh-keyscan github.com >> /home/runner/.ssh/known_hosts
#          # DOKKU_SSH_KEY is the name of the repository secret
#          echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > /home/runner/.ssh/github_actions
#          chmod 600 /home/runner/.ssh/github_actions
#          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#          ssh-add /home/runner/.ssh/github_actions
#
#      - name: Deploy
#        if: ${{ matrix.python == '3.10' && github.event_name == 'push' && (startsWith(github.ref_name, 'feature/unittest') || github.ref_name == 'main') }}
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          git clone git@github.com:${{ github.repository }}.git -b coverage-html /home/runner/work/pages
#          cd /home/runner/work/pages
#          git status
#          git rm --ignore-unmatch *
#          cp -r /home/runner/work/viur-core/viur-core/viur/tests/htmlcov/* .
#          ls -lHFA
#          git add -A
#          git status
#          git remote -v
#
#          echo "::debug::Author: $GITHUB_ACTOR";
#          echo "::debug::Author Email: `git show -s --format='%ae' ${{ github.sha }}`";
#          git config --global user.name "$GITHUB_ACTOR"
#          git config --global user.email `git show -s --format='%ae' ${{ github.sha }}`
#          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
#          git commit -asm "GitHub Page Build for ${{ github.sha }}" --allow-empty
#          git push origin coverage-html
#
#      - name: Check
#        run: |
#          pwd
#          ls . -lHFA
#          ls viur -lHFA
#          ls /home/runner/ -lHFA
##          ls /home/runner/actions_github_page* -lHFA
